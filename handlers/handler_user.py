from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state
from amocrm.v2 import Lead, Contact
from amocrm.v2.exceptions import AmoApiException
from config_data.config import Config, load_config
import keyboards.keyboard_user as kb
from filter.filter import validate_russian_phone_number
from filter.admin_filter import IsSuperAdmin
import logging
from database import requests as rq

router = Router()
config: Config = load_config()


class Stage(StatesGroup):
    name = State()
    phone = State()
    content = State()


async def create_lead_in_amocrm(name, phone, product):
    logging.info("create_lead_in_amocrm")
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact = Contact.objects.create(
            first_name=name,
            custom_fields_values=[
                {
                    "field_code": "PHONE",
                    "values": [{"value": phone}]
                },
            ]
        )
        # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞
        lead = Lead.objects.create(
            name=f"–õ–∏–¥ –æ—Ç {name}",
            contacts=[contact.id],
            custom_fields_values=[
                {
                    "field_id": 1117555,
                    "values": [{"value": str(product)}]
                }
            ]
        )

        logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–∏–¥: {lead.id} –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact.id}")
        return True

    except AmoApiException as e:
        logging.error(f"–û—à–∏–±–∫–∞ API amoCRM –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞: {e}")
        return False
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞: {e}")
        return False


@router.message(F.text == '/send_content', IsSuperAdmin())
async def send_content(message: Message, state: FSMContext):
    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    await state.set_state(Stage.content)


@router.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext) -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ - –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å" –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "/start"
    :param message:
    :param state:
    :return:
    """
    logging.info(f"process_start_command {message.chat.id}")
    await rq.add_user(tg_id=message.chat.id, data={"tg_id": message.chat.id,
                                                   "username": message.from_user.username})
    await state.set_state(default_state)
    await message.answer(text=f'–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –°–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
    await state.set_state(Stage.name)


@router.message(F.text, Stage.name)
async def get_username(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    :param message:
    :param state:
    :return:
    """
    logging.info(f'anketa_get_username: {message.from_user.id}')
    name = message.text
    await state.update_data(name=name)
    await message.answer(text=f'–†–∞–¥ –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, {name}. –ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É –Ω–∞—Å –ø—Ä–∏–æ–±—Ä–µ–ª–∏?',
                         reply_markup=kb.keyboard_product())
    await state.set_state(default_state)


@router.message(lambda message: message.text in [
                                                    "–ü–∏—à–∏-—Å—Ç–∏—Ä–∞–π",
                                                    "–ü–∞–ª—å—á–∏–∫–æ–≤–∞—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∞",
                                                    "–ü—Ä–æ–ø–∏—Å–∏",
                                                    "–ò–≥—Ä—É –Ω–∞ –ª–∏–ø—É—á–∫–∞—Ö",
                                                    "–¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –∫–Ω–∏–≥–∞",
                                                    "–í—ã—Ä–µ–∑–∞–ª–∫–∏",
                                                    "–ö–Ω–∏–≥–∞ —Å –æ–∫–æ—à–∫–∞–º–∏",
                                                    "–†–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—á–∏"
                                                ])
async def process_select_product(message: Message, state: FSMContext, bot: Bot) -> None:
    """
    –í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
    :param message:
    :param state:
    :return:
    """
    logging.info("process_select_product")
    await state.update_data(product=message.text)
    await message.answer(text='–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –Ω–∞—Å?',
                         reply_markup=ReplyKeyboardRemove())
    await bot.delete_message(chat_id=message.chat.id,
                             message_id=message.message_id+1)
    if message.text == '–ò–≥—Ä—É –Ω–∞ –ª–∏–ø—É—á–∫–∞—Ö':
        await message.answer_video(video='BAACAgIAAxkBAAMlZuGlVM-cyHUF95jPTGeYiJYufkoAAm1WAAK6nAlLWOty_-bYzzA2BA')
    await message.answer(text=f'–°—É–ø–µ—Äüéâ\n'
                              f'–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –Ω–∞—Å?',
                         reply_markup=kb.keyboard_agree())


@router.callback_query(F.data.startswith('agree_'))
async def process_select_product(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    answer = callback.data.split('_')[1]
    if answer == 'yes':
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
        await callback.message.answer(text=f'–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è',
                                      reply_markup=kb.keyboards_get_contact())
        await state.set_state(Stage.phone)
    else:
        try:
            await callback.message.edit_text(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ –í–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ —Å–º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'
                                                  ' –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n'
                                                  '–°–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?',
                                             reply_markup=kb.keyboard_agree())
        except:
            await callback.message.edit_text(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ –í–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ —Å–º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'
                                                  ' –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n'
                                                  '–°–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?',
                                             reply_markup=kb.keyboard_agree())
    await callback.answer()


@router.message(or_f(F.text, F.contact), StateFilter(Stage.phone))
async def process_validate_russian_phone_number(message: Message, state: FSMContext, bot: Bot) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–≤–æ–¥–∏–º –µ–≥–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é). –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    logging.info("process_start_command_user")
    if message.contact:
        phone = str(message.contact.phone_number)
    else:
        phone = message.text
        if not validate_russian_phone_number(phone):
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 89991112222:")
            return
    await state.update_data(phone=phone)
    await state.set_state(default_state)
    data = await state.get_data()
    for admin in config.tg_bot.admin_ids.split(','):
        try:
            await bot.send_message(chat_id=admin,
                                   text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ:\n\n'
                                        f'<b>–ò–º—è</b>: {data["name"]}\n'
                                        f'<b>–¢–µ–ª–µ—Ñ–æ–Ω</b>: {data["phone"]}\n'
                                        f'<b>–ü—Ä–æ–¥—É–∫—Ç</b>: {data["product"]}\n')
        except:
            pass
    await create_lead_in_amocrm(name=data['name'], phone=data['phone'], product=data['product'])
    await message.answer(text='–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã',
                         reply_markup=ReplyKeyboardRemove())
    await message.answer(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –∏ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –∑–¥–µ—Å—å',
                         reply_markup=kb.keyboard_manager())


@router.message(StateFilter(Stage.content))
async def get_content(message: Message, state: FSMContext):
    if message.photo:
        id_photo = message.photo[-1].file_id
        caption = message.caption
        await state.update_data(id_photo=id_photo)
        await state.update_data(caption=caption)
        await state.update_data(send_content='send_content')
    else:
        send_content = message.html_text
        await state.update_data(id_photo='id_photo')
        await state.update_data(caption='caption')
        await state.update_data(send_content=send_content)
    await state.set_state(default_state)
    await message.answer(text='–†–∞–∑–æ—Å–ª–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç?',
                         reply_markup=kb.keyboard_content())


@router.callback_query(F.data.startswith('content'))
async def send_content(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await callback.answer()
    list_users = await rq.get_all_users()
    answer = callback.data.split('_')[1]
    if answer == 'yes':
        data = await state.get_data()
        id_photo = data['id_photo']
        caption = data['caption']
        send_content = data['send_content']
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
        await callback.message.answer(text=f'–ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞')
        for user in list_users:
            print(user.tg_id)
            try:
                await bot.send_photo(chat_id=user.tg_id,
                                     photo=id_photo,
                                     caption=caption)
            except:
                print('error')

        for user in list_users:
            try:
                await bot.send_message(chat_id=user.tg_id,
                                       text=send_content)
            except:
                print('error')
    else:
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
        await callback.message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')